{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_ava */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/lib.npmtest_eslint_plugin_ava.js":"/* istanbul instrument in package npmtest_eslint_plugin_ava */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_ava = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_ava = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-ava && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_ava */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_ava\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_ava.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_eslint_plugin_ava.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_ava.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_eslint_plugin_ava.__dirname +\n                    '/lib.npmtest_eslint_plugin_ava.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/index.js":"'use strict';\nconst reqAll = require('req-all');\n\nmodule.exports = {\n\trules: reqAll('rules', {camelize: false}),\n\tconfigs: {\n\t\trecommended: {\n\t\t\tenv: {\n\t\t\t\tes6: true\n\t\t\t},\n\t\t\tparserOptions: {\n\t\t\t\tecmaVersion: 2017,\n\t\t\t\tsourceType: 'module'\n\t\t\t},\n\t\t\trules: {\n\t\t\t\t'ava/assertion-arguments': 'error',\n\t\t\t\t'ava/max-asserts': ['off', 5],\n\t\t\t\t'ava/no-async-fn-without-await': 'error',\n\t\t\t\t'ava/no-cb-test': 'off',\n\t\t\t\t'ava/no-duplicate-modifiers': 'error',\n\t\t\t\t'ava/no-identical-title': 'error',\n\t\t\t\t'ava/no-ignored-test-files': 'error',\n\t\t\t\t'ava/no-invalid-end': 'error',\n\t\t\t\t'ava/no-nested-tests': 'error',\n\t\t\t\t'ava/no-only-test': 'error',\n\t\t\t\t'ava/no-skip-assert': 'error',\n\t\t\t\t'ava/no-skip-test': 'error',\n\t\t\t\t'ava/no-statement-after-end': 'error',\n\t\t\t\t'ava/no-todo-implementation': 'error',\n\t\t\t\t'ava/no-todo-test': 'warn',\n\t\t\t\t'ava/no-unknown-modifiers': 'error',\n\t\t\t\t'ava/prefer-async-await': 'error',\n\t\t\t\t'ava/prefer-power-assert': 'off',\n\t\t\t\t'ava/test-ended': 'error',\n\t\t\t\t'ava/test-title': ['error', 'if-multiple'],\n\t\t\t\t'ava/use-t-well': 'error',\n\t\t\t\t'ava/use-t': 'error',\n\t\t\t\t'ava/use-test': 'error',\n\t\t\t\t'ava/use-true-false': 'error'\n\t\t\t}\n\t\t}\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/assertion-arguments.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst expectedNbArguments = {\n\tdeepEqual: {\n\t\tmin: 2,\n\t\tmax: 3\n\t},\n\tfail: {\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\tfalse: {\n\t\tmin: 1,\n\t\tmax: 2\n\t},\n\tfalsy: {\n\t\tmin: 1,\n\t\tmax: 2\n\t},\n\tifError: {\n\t\tmin: 1,\n\t\tmax: 2\n\t},\n\tis: {\n\t\tmin: 2,\n\t\tmax: 3\n\t},\n\tnot: {\n\t\tmin: 2,\n\t\tmax: 3\n\t},\n\tnotDeepEqual: {\n\t\tmin: 2,\n\t\tmax: 3\n\t},\n\tnotThrows: {\n\t\tmin: 1,\n\t\tmax: 2\n\t},\n\tpass: {\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\tplan: {\n\t\tmin: 1,\n\t\tmax: 1\n\t},\n\tregex: {\n\t\tmin: 2,\n\t\tmax: 3\n\t},\n\tnotRegex: {\n\t\tmin: 2,\n\t\tmax: 3\n\t},\n\tsnapshot: {\n\t\tmin: 1,\n\t\tmax: 2\n\t},\n\tthrows: {\n\t\tmin: 1,\n\t\tmax: 3\n\t},\n\ttrue: {\n\t\tmin: 1,\n\t\tmax: 2\n\t},\n\ttruthy: {\n\t\tmin: 1,\n\t\tmax: 2\n\t}\n};\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tconst options = context.options[0] || {};\n\tconst enforcesMessage = Boolean(options.message);\n\tconst shouldHaveMessage = options.message !== 'never';\n\n\tfunction report(node, message) {\n\t\tcontext.report({node, message});\n\t}\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tconst callee = node.callee;\n\n\t\t\tif (callee.type !== 'MemberExpression' ||\n\t\t\t\t!callee.property ||\n\t\t\t\tutil.nameOfRootObject(callee) !== 't' ||\n\t\t\t\tutil.isInContext(callee)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst gottenArgs = node.arguments.length;\n\t\t\tconst members = util.getMembers(callee)\n\t\t\t\t.filter(name => name !== 'skip');\n\n\t\t\tif (members[0] === 'end') {\n\t\t\t\tif (gottenArgs > 1) {\n\t\t\t\t\treport(node, `Too many arguments. Expected at most 1.`);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nArgs = expectedNbArguments[members[0]];\n\n\t\t\tif (!nArgs) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (gottenArgs < nArgs.min) {\n\t\t\t\treport(node, `Not enough arguments. Expected at least ${nArgs.min}.`);\n\t\t\t} else if (node.arguments.length > nArgs.max) {\n\t\t\t\treport(node, `Too many arguments. Expected at most ${nArgs.max}.`);\n\t\t\t} else if (enforcesMessage && nArgs.min !== nArgs.max) {\n\t\t\t\tconst hasMessage = gottenArgs === nArgs.max;\n\n\t\t\t\tif (!hasMessage && shouldHaveMessage) {\n\t\t\t\t\treport(node, 'Expected an assertion message, but found none.');\n\t\t\t\t} else if (hasMessage && !shouldHaveMessage) {\n\t\t\t\t\treport(node, 'Expected no assertion message, but found one.');\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n};\n\nconst schema = [{\n\ttype: 'object',\n\tproperties: {\n\t\tmessage: {\n\t\t\tenum: [\n\t\t\t\t'always',\n\t\t\t\t'never'\n\t\t\t]\n\t\t}\n\t}\n}];\n\nmodule.exports = {\n\tcreate,\n\tmeta: {\n\t\tschema\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/util.js":"'use strict';\nconst fs = require('fs');\n\nconst functionExpressions = [\n\t'FunctionExpression',\n\t'ArrowFunctionExpression'\n];\n\nexports.nameOfRootObject = node => {\n\tif (node.object.type === 'MemberExpression') {\n\t\treturn exports.nameOfRootObject(node.object);\n\t}\n\n\treturn node.object.name;\n};\n\nexports.isInContext = node => {\n\tif (node.object.type === 'MemberExpression') {\n\t\treturn exports.isInContext(node.object);\n\t}\n\n\treturn node.property.name === 'context';\n};\n\nexports.getAvaConfig = filepath => {\n\tconst defaultResult = {};\n\n\tif (!filepath) {\n\t\treturn defaultResult;\n\t}\n\n\ttry {\n\t\tconst packageContent = JSON.parse(fs.readFileSync(filepath, 'utf8'));\n\t\treturn (packageContent && packageContent.ava) || defaultResult;\n\t} catch (err) {\n\t\treturn defaultResult;\n\t}\n};\n\nexports.isFunctionExpression = node => {\n\treturn node && functionExpressions.indexOf(node.type) !== -1;\n};\n\nexports.getTestModifiers = function getTestModifiers(node) {\n\tif (node.type === 'CallExpression') {\n\t\treturn getTestModifiers(node.callee);\n\t}\n\n\tif (node.type === 'MemberExpression') {\n\t\treturn getTestModifiers(node.object).concat(node.property.name);\n\t}\n\n\treturn [];\n};\n\nconst getMembers = node => {\n\tconst name = node.property.name;\n\n\tif (node.object.type === 'MemberExpression') {\n\t\treturn getMembers(node.object).concat(name);\n\t}\n\n\treturn [name];\n};\n\nexports.getMembers = getMembers;\n\nconst assertionMethodsNumArguments = new Map([\n\t['deepEqual', 2],\n\t['fail', 0],\n\t['false', 1],\n\t['falsy', 1],\n\t['ifError', 1],\n\t['is', 2],\n\t['not', 2],\n\t['notDeepEqual', 2],\n\t['notThrows', 1],\n\t['pass', 0],\n\t['regex', 2],\n\t['notRegex', 2],\n\t['snapshot', 1],\n\t['throws', 1],\n\t['true', 1],\n\t['truthy', 1]\n]);\n\nconst assertionMethodNames = Array.from(assertionMethodsNumArguments.keys());\n\nexports.assertionMethodsNumArguments = assertionMethodsNumArguments;\nexports.assertionMethods = new Set(assertionMethodNames);\nexports.executionMethods = new Set(assertionMethodNames.concat(['end', 'plan']));\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/create-ava-rule.js":"'use strict';\nconst espurify = require('espurify');\nconst enhance = require('enhance-visitors');\nconst deepStrictEqual = require('deep-strict-equal');\n\nconst avaImportDeclarationAst = {\n\ttype: 'ImportDeclaration',\n\tspecifiers: [\n\t\t{\n\t\t\ttype: 'ImportDefaultSpecifier',\n\t\t\tlocal: {\n\t\t\t\ttype: 'Identifier',\n\t\t\t\tname: 'test'\n\t\t\t}\n\t\t}\n\t],\n\tsource: {\n\t\ttype: 'Literal',\n\t\tvalue: 'ava'\n\t}\n};\n\nconst avaVariableDeclaratorAst = {\n\ttype: 'VariableDeclarator',\n\tid: {\n\t\ttype: 'Identifier',\n\t\tname: 'test'\n\t},\n\tinit: {\n\t\ttype: 'CallExpression',\n\t\tcallee: {\n\t\t\ttype: 'Identifier',\n\t\t\tname: 'require'\n\t\t},\n\t\targuments: [\n\t\t\t{\n\t\t\t\ttype: 'Literal',\n\t\t\t\tvalue: 'ava'\n\t\t\t}\n\t\t]\n\t}\n};\n\nfunction isTestFunctionCall(node) {\n\tif (node.type === 'Identifier') {\n\t\treturn node.name === 'test';\n\t} else if (node.type === 'MemberExpression') {\n\t\treturn isTestFunctionCall(node.object);\n\t}\n\n\treturn false;\n}\n\nfunction hasTestModifier(node, mod) {\n\tif (node.type === 'CallExpression') {\n\t\treturn hasTestModifier(node.callee, mod);\n\t} else if (node.type === 'MemberExpression') {\n\t\tif (node.property.type === 'Identifier' && node.property.name === mod) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn hasTestModifier(node.object, mod);\n\t}\n\n\treturn false;\n}\n\nmodule.exports = () => {\n\tlet isTestFile = false;\n\tlet currentTestNode = null;\n\n\t/* eslint quote-props: [2, \"as-needed\"] */\n\tconst predefinedRules = {\n\t\tImportDeclaration: node => {\n\t\t\tif (!isTestFile && deepStrictEqual(espurify(node), avaImportDeclarationAst)) {\n\t\t\t\tisTestFile = true;\n\t\t\t}\n\t\t},\n\t\tVariableDeclarator: node => {\n\t\t\tif (!isTestFile && deepStrictEqual(espurify(node), avaVariableDeclaratorAst)) {\n\t\t\t\tisTestFile = true;\n\t\t\t}\n\t\t},\n\t\tCallExpression: node => {\n\t\t\tif (isTestFunctionCall(node.callee)) {\n\t\t\t\t// entering test function\n\t\t\t\tcurrentTestNode = node;\n\t\t\t}\n\t\t},\n\t\t'CallExpression:exit': node => {\n\t\t\tif (currentTestNode === node) {\n\t\t\t\t// leaving test function\n\t\t\t\tcurrentTestNode = null;\n\t\t\t}\n\t\t},\n\t\t'Program:exit': () => {\n\t\t\tisTestFile = false;\n\t\t}\n\t};\n\n\treturn {\n\t\thasTestModifier: mod => hasTestModifier(currentTestNode, mod),\n\t\thasNoHookModifier: () => !hasTestModifier(currentTestNode, 'before') &&\n\t\t\t\t!hasTestModifier(currentTestNode, 'beforeEach') &&\n\t\t\t\t!hasTestModifier(currentTestNode, 'after') &&\n\t\t\t\t!hasTestModifier(currentTestNode, 'afterEach'),\n\t\tisInTestFile: () => isTestFile,\n\t\tisInTestNode: () => currentTestNode,\n\t\tisTestNode: node => currentTestNode === node,\n\t\tmerge: customHandlers => {\n\t\t\treturn enhance.mergeVisitors([predefinedRules, customHandlers]);\n\t\t}\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/assertion-message.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nfunction nbArguments(node) {\n\tconst nArgs = util.assertionMethodsNumArguments.get(node.property.name);\n\n\tif (nArgs !== undefined) {\n\t\treturn nArgs;\n\t}\n\n\tif (node.object.type === 'MemberExpression') {\n\t\treturn nbArguments(node.object);\n\t}\n\n\treturn -1;\n}\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tconst shouldHaveMessage = context.options[0] !== 'never';\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tconst callee = node.callee;\n\n\t\t\tif (callee.type !== 'MemberExpression') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (callee.property && util.nameOfRootObject(callee) === 't') {\n\t\t\t\tconst nArgs = nbArguments(callee);\n\n\t\t\t\tif (nArgs === -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst hasMessage = nArgs < node.arguments.length;\n\n\t\t\t\tif (!hasMessage && shouldHaveMessage) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: '(DEPRECATED) Expected an assertion message, but found none.'\n\t\t\t\t\t});\n\t\t\t\t} else if (hasMessage && !shouldHaveMessage) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: '(DEPRECATED) Expected no assertion message, but found one.'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n};\n\nconst schema = [{\n\tenum: [\n\t\t'always',\n\t\t'never'\n\t]\n}];\n\nmodule.exports = {\n\tcreate,\n\tmeta: {\n\t\tschema,\n\t\tdeprecated: true\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/max-asserts.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst notAssertionMethods = ['plan', 'end'];\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tconst maxAssertions = context.options[0] || 5;\n\tlet assertionCount = 0;\n\tlet nodeToReport = null;\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tconst callee = node.callee;\n\n\t\t\tif (callee.type !== 'MemberExpression') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (callee.property &&\n\t\t\t\t\tnotAssertionMethods.indexOf(callee.property.name) === -1 &&\n\t\t\t\t\tutil.nameOfRootObject(callee) === 't') {\n\t\t\t\tconst members = util.getMembers(callee)\n\t\t\t\t\t.filter(name => name !== 'skip');\n\n\t\t\t\tif (!util.assertionMethods.has(members[0])) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tassertionCount++;\n\n\t\t\t\tif (assertionCount === maxAssertions + 1) {\n\t\t\t\t\tnodeToReport = node;\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\t'CallExpression:exit': visitIf([ava.isTestNode])(() => {\n\t\t\t// leaving test function\n\t\t\tif (assertionCount > maxAssertions) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode: nodeToReport,\n\t\t\t\t\tmessage: `Expected at most ${maxAssertions} assertions, but found ${assertionCount}.`\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tassertionCount = 0;\n\t\t\tnodeToReport = null;\n\t\t})\n\t});\n};\n\nconst schema = [{\n\ttype: 'integer'\n}];\n\nmodule.exports = {\n\tcreate,\n\tmeta: {\n\t\tschema\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-async-fn-without-await.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tlet testIsAsync = false;\n\tlet testUsed = false;\n\n\tconst registerUseOfAwait = () => {\n\t\tif (testIsAsync) {\n\t\t\ttestUsed = true;\n\t\t}\n\t};\n\n\tconst isAsync = node => Boolean(node && node.async);\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\ttestIsAsync = isAsync(node.arguments[0]) || isAsync(node.arguments[1]);\n\t\t}),\n\t\tAwaitExpression: registerUseOfAwait,\n\t\tYieldExpression: registerUseOfAwait,\n\t\t'CallExpression:exit': visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tif (testIsAsync && !testUsed) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'Function was declared as `async` but doesn\\'t use `await`'\n\t\t\t\t});\n\t\t\t}\n\t\t\ttestIsAsync = false;\n\t\t\ttestUsed = false;\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-cb-test.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tif (ava.hasTestModifier('cb')) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: '`test.cb()` should be not be used.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-duplicate-modifiers.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tconst testModifiers = util.getTestModifiers(node).sort();\n\t\t\tif (testModifiers.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttestModifiers.reduce((prev, current) => {\n\t\t\t\tif (prev === current) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: `Duplicate test modifier \\`${current}\\`.`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn current;\n\t\t\t});\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-identical-title.js":"'use strict';\nconst espurify = require('espurify');\nconst visitIf = require('enhance-visitors').visitIf;\nconst deepStrictEqual = require('deep-strict-equal');\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst purify = node => node && espurify(node);\n\nlet isStatic = null;\n\nconst isStaticTemplateLiteral = node => node.expressions.every(isStatic);\n\nisStatic = node => node.type === 'Literal' ||\n\t\t(node.type === 'TemplateLiteral' && isStaticTemplateLiteral(node)) ||\n\t\t(node.type === 'BinaryExpression' && isStatic(node.left) && isStatic(node.right));\n\nfunction isTitleUsed(usedTitleNodes, titleNode) {\n\tconst purifiedNode = purify(titleNode);\n\treturn usedTitleNodes.some(usedTitle => deepStrictEqual(purifiedNode, usedTitle));\n}\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tlet usedTitleNodes = [];\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode,\n\t\t\tava.hasNoHookModifier\n\t\t])(node => {\n\t\t\tconst args = node.arguments;\n\t\t\tconst titleNode = args.length > 1 || ava.hasTestModifier('todo') ? args[0] : undefined;\n\n\t\t\t// don't flag computed titles or anonymous tests (anon tests covered in the if-multiple rule)\n\t\t\tif (titleNode === undefined || !isStatic(titleNode)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't flag what look to be macros\n\t\t\tif (args.length > 2 && !util.isFunctionExpression(args[1])) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isTitleUsed(usedTitleNodes, titleNode)) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'Test title is used multiple times in the same file.'\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tusedTitleNodes.push(purify(titleNode));\n\t\t}),\n\t\t'Program:exit': () => {\n\t\t\tusedTitleNodes = [];\n\t\t}\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-ignored-test-files.js":"'use strict';\nconst path = require('path');\nconst arrify = require('arrify');\nconst pkgUp = require('pkg-up');\nconst multimatch = require('multimatch');\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst defaultFiles = [\n\t'test.js',\n\t'test-*.js',\n\t'test/**/*.js',\n\t'**/__tests__/**/*.js',\n\t'**/*.test.js'\n];\n\nconst excludedFolders = [\n\t'**/fixtures/**',\n\t'**/helpers/**'\n];\n\nfunction isIgnored(rootDir, files, filepath) {\n\tconst relativeFilePath = path.relative(rootDir, filepath);\n\n\tif (multimatch([relativeFilePath], excludedFolders).length !== 0) {\n\t\treturn `Test file is ignored because it is in \\`${excludedFolders.join(' ')}\\`.`;\n\t}\n\n\tif (multimatch([relativeFilePath], files).length === 0) {\n\t\treturn `Test file is ignored because it is not in \\`${files.join(' ')}\\`.`;\n\t}\n\n\treturn null;\n}\n\nfunction getPackageInfo() {\n\tconst packageFilePath = pkgUp.sync();\n\n\treturn {\n\t\trootDir: packageFilePath && path.dirname(packageFilePath),\n\t\tfiles: util.getAvaConfig(packageFilePath).files\n\t};\n}\n\nconst create = context => {\n\tconst filename = context.getFilename();\n\n\tif (filename === '<text>') {\n\t\treturn {};\n\t}\n\n\tconst ava = createAvaRule();\n\tconst packageInfo = getPackageInfo();\n\tconst options = context.options[0] || {};\n\tconst files = arrify(options.files || packageInfo.files || defaultFiles);\n\tlet hasTestCall = false;\n\n\tif (!packageInfo.rootDir) {\n\t\t// could not find a package.json folder\n\t\treturn {};\n\t}\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(() => {\n\t\t\thasTestCall = true;\n\t\t}),\n\t\t'Program:exit': node => {\n\t\t\tif (!hasTestCall) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst ignoredReason = isIgnored(packageInfo.rootDir, files, filename);\n\n\t\t\tif (ignoredReason) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: ignoredReason\n\t\t\t\t});\n\t\t\t}\n\n\t\t\thasTestCall = false;\n\t\t}\n\t});\n};\n\nconst schema = [{\n\ttype: 'object',\n\tproperties: {\n\t\tfiles: {\n\t\t\tanyOf: [\n\t\t\t\t{type: 'array'},\n\t\t\t\t{type: 'string'}\n\t\t\t]\n\t\t}\n\t}\n}];\n\nmodule.exports = {\n\tcreate,\n\tmeta: {\n\t\tschema\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-invalid-end.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tMemberExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tif (node.property.name === 'end' &&\n\t\t\t\t\t!ava.hasTestModifier('cb') &&\n\t\t\t\t\tutil.nameOfRootObject(node) === 't') {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: '`t.end()` should only be used inside of `test.cb()`.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-nested-tests.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tlet nestedCount = 0;\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tnestedCount++;\n\t\t\tif (nestedCount >= 2) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'Tests should not be nested'\n\t\t\t\t});\n\t\t\t}\n\t\t}),\n\n\t\t'CallExpression:exit': visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(() => {\n\t\t\tnestedCount--;\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-only-test.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tif (ava.hasTestModifier('only')) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: '`test.only()` should not be used.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-skip-assert.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tMemberExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tif (node.property.name === 'skip' &&\n\t\t\t\t\tutil.nameOfRootObject(node) === 't') {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'No assertions should be skipped.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-skip-test.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tif (ava.hasTestModifier('skip')) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'No tests should be skipped.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-statement-after-end.js":"'use strict';\nconst createAvaRule = require('../create-ava-rule');\n\n// This rule makes heavy use of eslints code path analysis\n// See: http://eslint.org/docs/developer-guide/code-path-analysis.html\n\n// returns true if this node represents a call to `t.end(...)`\nconst isEndExpression = node =>\n\tnode.type === 'CallExpression' &&\n\tnode.callee.type === 'MemberExpression' &&\n\tnode.callee.object.type === 'Identifier' &&\n\tnode.callee.object.name === 't' &&\n\tnode.callee.property.type === 'Identifier' &&\n\tnode.callee.property.name === 'end';\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tconst segmentInfoMap = Object.create(null);\n\tconst segmentInfoStack = [];\n\tlet currentSegmentInfo = null;\n\n\tfunction segmentStart(segment) {\n\t\t// a new CodePathSegment has started, create an \"info\" object to track this segments state.\n\t\tsegmentInfoStack.push(currentSegmentInfo);\n\n\t\tcurrentSegmentInfo = {\n\t\t\tended: false,\n\t\t\tprev: segment.prevSegments.map(prevSegment => segmentInfoMap[prevSegment.id])\n\t\t};\n\n\t\tsegmentInfoMap[segment.id] = currentSegmentInfo;\n\t}\n\n\tfunction segmentEnd() {\n\t\tcurrentSegmentInfo = segmentInfoStack.pop();\n\t}\n\n\tfunction checkForEndExpression(node) {\n\t\tif (isEndExpression(node)) {\n\t\t\tcurrentSegmentInfo.ended = true;\n\t\t}\n\t}\n\n\tfunction checkStatement(node) {\n\t\tif (!ava.isInTestFile()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ended = [currentSegmentInfo]\n\t\t\t.concat(currentSegmentInfo.prev)\n\t\t\t.filter(info => info.ended);\n\n\t\t// If this segment or any previous segment is already ended, further statements are not allowed, report as an error.\n\t\tif (ended.length > 0) {\n\t\t\tended.forEach(info => {\n\t\t\t\t// unset ended state to avoid generating lots of errors\n\t\t\t\tinfo.ended = false;\n\t\t\t});\n\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessage: 'No statements following a call to `t.end()`.'\n\t\t\t});\n\t\t}\n\t}\n\n\treturn ava.merge({\n\t\tExpressionStatement: checkStatement,\n\t\tWithStatement: checkStatement,\n\t\tIfStatement: checkStatement,\n\t\tSwitchStatement: checkStatement,\n\t\tThrowStatement: checkStatement,\n\t\tTryStatement: checkStatement,\n\t\tWhileStatement: checkStatement,\n\t\tDoWhileStatement: checkStatement,\n\t\tForStatement: checkStatement,\n\t\tForInStatement: checkStatement,\n\t\tForOfStatement: checkStatement,\n\t\tReturnStatement: node => {\n\t\t\t// empty return statements are OK even after `t.end`,\n\t\t\t// only check it if there is an argument\n\t\t\tif (node.argument) {\n\t\t\t\tcheckStatement(node);\n\t\t\t}\n\t\t},\n\t\tonCodePathSegmentStart: segmentStart,\n\t\tonCodePathSegmentEnd: segmentEnd,\n\t\tCallExpression: checkForEndExpression\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-todo-implementation.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tif (ava.hasTestModifier('todo') && node.arguments.some(util.isFunctionExpression)) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: '`test.todo()` should not be passed an implementation function.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-todo-test.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tif (ava.hasTestModifier('todo')) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: '`test.todo()` should be not be used.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/no-unknown-modifiers.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst modifiers = [\n\t'after',\n\t'afterEach',\n\t'always',\n\t'before',\n\t'beforeEach',\n\t'cb',\n\t'only',\n\t'serial',\n\t'skip',\n\t'todo',\n\t'failing'\n];\n\nconst unknownModifiers = node => util.getTestModifiers(node)\n\t.filter(modifier => modifiers.indexOf(modifier) === -1);\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tconst unknown = unknownModifiers(node);\n\n\t\t\tif (unknown.length !== 0) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: `Unknown test modifier \\`${unknown[0]}\\`.`\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/prefer-async-await.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nfunction containsThen(node) {\n\tif (!node ||\n\t\tnode.type !== 'CallExpression' ||\n\t\tnode.callee.type !== 'MemberExpression'\n\t) {\n\t\treturn false;\n\t}\n\n\tconst callee = node.callee;\n\tif (callee.property.type === 'Identifier' &&\n\t\tcallee.property.name === 'then'\n\t) {\n\t\treturn true;\n\t}\n\n\treturn containsThen(callee.object);\n}\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\tconst check = visitIf([\n\t\tava.isInTestFile,\n\t\tava.isInTestNode\n\t])(node => {\n\t\tif (node.body.type !== 'BlockStatement') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst statements = node.body.body;\n\t\tconst returnStatement = statements.find(statement => statement.type === 'ReturnStatement');\n\t\tif (returnStatement && containsThen(returnStatement.argument)) {\n\t\t\tcontext.report({\n\t\t\t\tnode,\n\t\t\t\tmessage: 'Prefer using async/await instead of returning a Promise.'\n\t\t\t});\n\t\t}\n\t});\n\n\treturn ava.merge({\n\t\tArrowFunctionExpression: check,\n\t\tFunctionExpression: check\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/prefer-power-assert.js":"'use strict';\nconst espurify = require('espurify');\nconst visitIf = require('enhance-visitors').visitIf;\nconst deepStrictEqual = require('deep-strict-equal');\nconst createAvaRule = require('../create-ava-rule');\n\nconst notAllowed = [\n\t'truthy',\n\t'falsy',\n\t'false',\n\t'is',\n\t'not',\n\t'regex',\n\t'notRegex',\n\t'ifError'\n];\n\nconst assertionCalleeAst = methodName => ({\n\ttype: 'MemberExpression',\n\tobject: {\n\t\ttype: 'Identifier',\n\t\tname: 't'\n\t},\n\tproperty: {\n\t\ttype: 'Identifier',\n\t\tname: methodName\n\t},\n\tcomputed: false\n});\n\nconst skippedAssertionCalleeAst = methodName => ({\n\ttype: 'MemberExpression',\n\tobject: {\n\t\ttype: 'MemberExpression',\n\t\tobject: {\n\t\t\ttype: 'Identifier',\n\t\t\tname: 't'\n\t\t},\n\t\tproperty: {\n\t\t\ttype: 'Identifier',\n\t\t\tname: 'skip'\n\t\t},\n\t\tcomputed: false\n\t},\n\tproperty: {\n\t\ttype: 'Identifier',\n\t\tname: methodName\n\t},\n\tcomputed: false\n});\n\nconst isCalleeMatched = (callee, methodName) =>\n\tdeepStrictEqual(callee, assertionCalleeAst(methodName)) ||\n\tdeepStrictEqual(callee, skippedAssertionCalleeAst(methodName));\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tconst callee = espurify(node.callee);\n\n\t\t\tif (callee.type === 'MemberExpression') {\n\t\t\t\tnotAllowed.forEach(methodName => {\n\t\t\t\t\tif (isCalleeMatched(callee, methodName)) {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessage: 'Only asserts with no power-assert alternative are allowed.'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/test-ended.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tlet endCalled = false;\n\n\treturn ava.merge({\n\t\tMemberExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tif (ava.hasTestModifier('cb') &&\n\t\t\t\tnode.object.name === 't' &&\n\t\t\t\tnode.property.name === 'end'\n\t\t\t) {\n\t\t\t\tendCalled = true;\n\t\t\t}\n\t\t}),\n\t\t'CallExpression:exit': visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tif (!ava.hasTestModifier('cb')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// leaving test function\n\t\t\tif (endCalled) {\n\t\t\t\tendCalled = false;\n\t\t\t} else {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'Callback test was not ended. Make sure to explicitly end the test with `t.end()`.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/test-title.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\tconst ifMultiple = context.options[0] !== 'always';\n\tlet testCount = 0;\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode,\n\t\t\tava.hasNoHookModifier\n\t\t])(node => {\n\t\t\ttestCount++;\n\n\t\t\tconst requiredLength = ava.hasTestModifier('todo') ? 1 : 2;\n\t\t\tconst hasNoTitle = node.arguments.length < requiredLength;\n\t\t\tconst isOverThreshold = !ifMultiple || testCount > 1;\n\n\t\t\tif (hasNoTitle && isOverThreshold) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'Test should have a title.'\n\t\t\t\t});\n\t\t\t}\n\t\t}),\n\t\t'Program:exit': () => {\n\t\t\ttestCount = 0;\n\t\t}\n\t});\n};\n\nconst schema = [{\n\tenum: [\n\t\t'always',\n\t\t'if-multiple'\n\t]\n}];\n\nmodule.exports = {\n\tcreate,\n\tmeta: {\n\t\tschema\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/use-t-well.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst isMethod = name => util.executionMethods.has(name);\n\nconst isCallExpression = node =>\n\tnode.parent.type === 'CallExpression' &&\n\tnode.parent.callee === node;\n\nconst getMemberStats = members => {\n\tconst initial = {\n\t\tskip: [],\n\t\tmethod: [],\n\t\tother: []\n\t};\n\n\treturn members.reduce((res, member) => {\n\t\tif (member === 'skip') {\n\t\t\tres.skip.push(member);\n\t\t} else if (isMethod(member)) {\n\t\t\tres.method.push(member);\n\t\t} else {\n\t\t\tres.other.push(member);\n\t\t}\n\n\t\treturn res;\n\t}, initial);\n};\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tif (node.callee.type !== 'MemberExpression' &&\n\t\t\t\t\tnode.callee.name === 't') {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: '`t` is not a function.'\n\t\t\t\t});\n\t\t\t}\n\t\t}),\n\t\tMemberExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tif (node.parent.type === 'MemberExpression' ||\n\t\t\t\t\tutil.nameOfRootObject(node) !== 't') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst members = util.getMembers(node);\n\t\t\tconst stats = getMemberStats(members);\n\n\t\t\tif (members[0] === 'context') {\n\t\t\t\t// anything is fine when of the form `t.context...`\n\t\t\t\tif (members.length === 1 && isCallExpression(node)) {\n\t\t\t\t\t// except `t.context()`\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Unknown assertion method `context`.'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isCallExpression(node)) {\n\t\t\t\tif (stats.other.length > 0) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: `Unknown assertion method \\`${stats.other[0]}\\`.`\n\t\t\t\t\t});\n\t\t\t\t} else if (stats.skip.length > 1) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Too many chained uses of `skip`.'\n\t\t\t\t\t});\n\t\t\t\t} else if (stats.method.length > 1) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Can\\'t chain assertion methods.'\n\t\t\t\t\t});\n\t\t\t\t} else if (stats.method.length === 0) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessage: 'Missing assertion method.'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (stats.other.length > 0) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: `Unknown member \\`${stats.other[0]}\\`. Use \\`context.${stats.other[0]}\\` instead.`\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/use-t.js":"'use strict';\nconst visitIf = require('enhance-visitors').visitIf;\nconst createAvaRule = require('../create-ava-rule');\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isTestNode\n\t\t])(node => {\n\t\t\tconst functionArg = node.arguments[node.arguments.length - 1];\n\n\t\t\tif (!(functionArg && functionArg.params && functionArg.params.length > 0)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (functionArg.params.length > 1) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'Test should only have one parameter named `t`.'\n\t\t\t\t});\n\t\t\t} else if (functionArg.params[0].name !== 't') {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessage: 'Test parameter should be named `t`.'\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/use-test.js":"'use strict';\nconst espurify = require('espurify');\nconst deepStrictEqual = require('deep-strict-equal');\n\nconst avaVariableDeclaratorInitAst = {\n\ttype: 'CallExpression',\n\tcallee: {\n\t\ttype: 'Identifier',\n\t\tname: 'require'\n\t},\n\targuments: [\n\t\t{\n\t\t\ttype: 'Literal',\n\t\t\tvalue: 'ava'\n\t\t}\n\t]\n};\n\nfunction report(context, node) {\n\tcontext.report({\n\t\tnode,\n\t\tmessage: 'AVA should be imported as `test`.'\n\t});\n}\n\nconst create = context => ({\n\tImportDeclaration: node => {\n\t\tif (node.source.value === 'ava' && node.specifiers[0].local.name !== 'test') {\n\t\t\treport(context, node);\n\t\t}\n\t},\n\tVariableDeclarator: node => {\n\t\tif (node.id.name !== 'test' && node.init && deepStrictEqual(espurify(node.init), avaVariableDeclaratorInitAst)) {\n\t\t\treport(context, node);\n\t\t}\n\t}\n});\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-ava/node_modules/eslint-plugin-ava/rules/use-true-false.js":"'use strict';\nconst espree = require('espree');\nconst espurify = require('espurify');\nconst visitIf = require('enhance-visitors').visitIf;\nconst deepStrictEqual = require('deep-strict-equal');\nconst util = require('../util');\nconst createAvaRule = require('../create-ava-rule');\n\nconst booleanBinaryOperators = [\n\t'==',\n\t'===',\n\t'!=',\n\t'!==',\n\t'<',\n\t'<=',\n\t'>',\n\t'>='\n];\n\nconst knownBooleanSignatures = [\n\t'isFinite()',\n\t'isNaN()',\n\t'Object.is()',\n\t'Object.isExtensible()',\n\t'Object.isFrozen()',\n\t'Object.isSealed()',\n\t'Boolean()',\n\t'Number.isNaN()',\n\t'Number.isFinite()',\n\t'Number.isInteger()',\n\t'Number.isSafeInteger()',\n\t'Array.isArray()',\n\t'ArrayBuffer.isView()',\n\t'SharedArrayBuffer.isView()',\n\t'Reflect.has()',\n\t'Reflect.isExtensible()'\n].map(signature => espurify(espree.parse(signature).body[0].expression.callee));\n\nfunction matchesKnownBooleanExpression(arg) {\n\tif (arg.type !== 'CallExpression') {\n\t\treturn false;\n\t}\n\n\tconst callee = espurify(arg.callee);\n\n\treturn knownBooleanSignatures.some(signature => deepStrictEqual(callee, signature));\n}\n\nconst create = context => {\n\tconst ava = createAvaRule();\n\n\treturn ava.merge({\n\t\tCallExpression: visitIf([\n\t\t\tava.isInTestFile,\n\t\t\tava.isInTestNode\n\t\t])(node => {\n\t\t\tif (\n\t\t\t\tnode.callee.type === 'MemberExpression' &&\n\t\t\t\t(node.callee.property.name === 'truthy' || node.callee.property.name === 'falsy') &&\n\t\t\t\tutil.nameOfRootObject(node.callee) === 't'\n\t\t\t) {\n\t\t\t\tconst arg = node.arguments[0];\n\n\t\t\t\tif (arg &&\n\t\t\t\t\t((arg.type === 'BinaryExpression' && booleanBinaryOperators.indexOf(arg.operator) !== -1) ||\n\t\t\t\t\t(arg.type === 'UnaryExpression' && arg.operator === '!') ||\n\t\t\t\t\t(arg.type === 'Literal' && arg.value === Boolean(arg.value)) ||\n\t\t\t\t\t(matchesKnownBooleanExpression(arg)))\n\t\t\t\t) {\n\t\t\t\t\tif (node.callee.property.name === 'falsy') {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessage: '`t.false()` should be used instead of `t.falsy()`.'\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.report({\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tmessage: '`t.true()` should be used instead of `t.truthy()`.'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t});\n};\n\nmodule.exports = {\n\tcreate,\n\tmeta: {}\n};\n"}